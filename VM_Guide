# BitCanna Full Node Wallet Installation Guide on Raspberry Pi under a Virtual Machine
BitCanna Raspberry Pi Wallet Installation Guide

WARNING!

This is still a WiP (Work in Progress) project a lot of changes will be made along the way so use any intrusctions described below at you own risk!!!

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

The following instructions intend that the user (you) already knwo how to at least do the initial Raspeberry Pi setup if not, follow the link to the official guide on how to do the initial installation of the Raspberry Pi.

https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up

Note: You can skip the update part of the initial RPi instalation process to save time.

All the process will be done using the Terminal, so if you want you can configure your RPi to start/run with just the Command Line Interface (CLI) instead of the regular Desktop Inteface.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
After the initial setup of your RaspberryPi you will need to tweek it a little bit by expanding the disk usage as well as its swap size to do that just follow the steps:

1 - Expand disk space 

1.1 - Use comand 

sudo raspi-config 

1.2 - Go to "Localisation Options"

1.3 - Choose "Change Locale"

1.4 - In the list make sure that at least "en_US.UTF-8 UTF-8" is checked

1.5 - Choose "OK" to build the locales

(if you are running a VM skip to step 1.8)
1.6 - Go to "Advance Options"

1.7 - Choose "Expand Disk Space"

1.8 - Exit the Pi Configuration Tool

1.9 - Select "Yes" when it asks to reboot.

2 - Increase the Swap size:

2.1 - Use command 

sudo nano /etc/dphys-swapfile

2.2 - Locate the line (in white) -> CONF_SWAPSIZE=100

2.3 - Change it to -> CONF_SWAPSIZE=2048

2.4 - press: "ctrl+x" and then "Y" and "Enter"

2.5 - Enable the Swap file with its new size 

sudo dphys-swapfile setup && sudo dphys-swapfile swapon && sudo chmod -R a+rwx ./

(This step is not mandatory but it can be usefull to monitoring the RPi behaviour, specially when its compiling, if you want you can skip to Step 4)
3 - Install Webmin (http://www.webmin.com/) and IP Tables to enable firewall access 

3.1 - Install dependencies 

sudo apt-get --fix-broken install -y perl libnet-ssleay-perl openssl libauthen-pam-perl libpam-runtime libio-pty-perl apt-show-versions python

3.2 - Download  and Install Webmin

wget http://prdownloads.sourceforge.net/webadmin/webmin_1.953_all.deb && sudo dpkg --install webmin_1.953_all.deb && rm webmin_1.953_all.deb

3.3 - Install iptables 

sudo apt-get install iptables

3.4 - Add Firewall rule to open port 10000

sudo iptables -A INPUT -p tcp -m tcp --dport 10000 -j ACCEPT && sudo /sbin/iptables-save

3.5 - Connect to RPi on Webmin using YOUR_RPi_IP:10000, then login using your RPi credentials

4 - Update and Upgrade the RPi 

sudo apt-get update && sudo apt-get full-upgrade -y 

5 - Compiling and Installing Boost Libraries ver. 1.57

5.1 - Download the Boost Libraries, uncompress it, and cd into the uncompressed directory

wget https://sourceforge.net/projects/boost/files/boost/1.57.0/boost_1_57_0.tar.gz && tar -xzvf boost_1_57_0.tar.gz && rm boost_1_57_0.tar.gz && sudo chmod -R a+rwx boost_1_57_0/ && cd boost_1_57_0/

5.2 - Then, configure the system for compiling, do the actual compile job with make (will take a good while), and then install Boost Libraries

sudo ./bootstrap.sh && sudo ./b2 install

5.3 - Exit the folder

cd

6 - Install some dependencies

sudo apt-get install build-essential autoconf automake libtool libbz2-dev libssl-dev qt4-qmake libqt4-dev libminiupnpc-dev libdb++-dev libdb-dev libcrypto++-dev ufw git software-properties-common autotools-dev pkg-config libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler libqrencode-dev automake g++-mingw-w64-x86-64 libevent-dev libgmp-dev devscripts libsodium-dev qt5-default -y

7 - Install a working libssl (VM mode)

7.1 - Remove current libssl and edit RPi sources file

sudo apt-get remove libssl-dev -y && sudo nano /etc/apt/sources.list

7.2 - Change "buster" to "jessie" 

7.3 - Press

"ctrl+x" > "Y" > "Enter"

sudo nano /etc/apt/sources.list.d/raspi.list

7.2 - Change "buster" to "jessie" 

7.3 - Press

"ctrl+x" > "Y" > "Enter"

7.4 - Update and Install libssl-dev, mark and hold it, and edit RPi sources file again 

sudo apt-get update && sudo apt-get install -y libssl-dev && sudo apt-mark hold libssl-dev && sudo apt-mark hold libssl1.0.0 && sudo nano /etc/apt/sources.list

7.5 - Change "jessie"  to "stretch"

7.6 - Press

"ctrl+x" > "Y" > "Enter"

sudo nano /etc/apt/sources.list.d/raspi.list

7.2 - Change "jessie" to "stretch" 

7.3 - Press

"ctrl+x" > "Y" > "Enter"

8 - Update and Upgrade RPi

sudo apt-get update && sudo apt-get upgrade -y

9 - Compiling and Installing libsodium

9.1 - Download the libsodium, uncompress it, and cd into the uncompressed directory

wget https://github.com/jedisct1/libsodium/releases/download/1.0.3/libsodium-1.0.3.tar.gz && tar -zxvf libsodium-1.0.3.tar.gz && rm libsodium-1.0.3.tar.gz && sudo chmod -R a+rwx libsodium-1.0.3/ && cd libsodium-1.0.3/ 

9.2 - Then, configure the system for compiling, do the actual compile job with make (will take a good while), and then install libsodium

./configure && make -j4 && sudo make install 

9.3 Exit folder

cd

10 - Compiling and Installing ZeroMQ latest versions

10.1 - Download the ZeroMQ, uncompress it, and cd into the uncompressed directory

wget https://github.com/zeromq/libzmq/releases/download/v4.3.2/zeromq-4.3.2.tar.gz && tar -zxvf zeromq-4.3.2.tar.gz && rm zeromq-4.3.2.tar.gz && sudo chmod -R a+rwx zeromq-4.3.2/ && cd zeromq-4.3.2/ &

10.2 - Then, configure the system for compiling, do the actual compile job with make (will take a good while), and then install ZeroMQ

./configure && make -j4 && sudo make install && sudo ldconfig 

10.3 - Exit folder 

cd

11 - Compiling and Installing Berkeley DB 4.8

11.1 - Download the Berkeley DB, uncompress it, and cd into the uncompressed directory 

wget http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz && tar -xzvf db-4.8.30.NC.tar.gz && rm db-4.8.30.NC.tar.gz && sudo chmod -R a+rwx db-4.8.30.NC/ && sed -i 's/__atomic_compare_exchange/__atomic_compare_exchange_db/g' db-4.8.30.NC/dbinc/atomic.h && cd db-4.8.30.NC/build_unix/ 

11.2 - Then, configure the system for compiling, do the actual compile job with make (will take a good while), and then install Berkeley DB

sudo ../dist/configure --enable-cxx && make -j4 && sudo make install

11.3 - Exit folder

cd

12 - Run the Boost Libraries installation again to complete intalling what was left from the 1st attempt (it's normal dont panic)

12.1 - use the command:

cd boost_1_57_0/ && sudo ./bootstrap.sh && sudo ./b2 install

12.2 - Exit the folder

cd

13 - Compiling and Installing the BitCanna Wallet

13.1 - clone the BitCanna GitHub, uncompress it, and cd into the directory

git clone https://github.com/BitCannaGlobal/BCNA.git && sudo chmod -R a+rwx BCNA/ && cd BCNA/

13.2 - open and edit the following file 

sudo nano /home/pi/BCNA/src/net.h

13.3 - add "#include <atomic >" at the end of the 1st include group (without quotes and remove the sapce after the last c )

13.4 - press

"ctrl+x" > "Y" > "Enter"

13.5 - Then, configure the system for compiling, do the actual compile job with make (will take a good while), and then install the BitCanna Wallet

./autogen.sh && ./configure LIBS="-lboost_atomic" CXXFLAGS="--param ggc-min-expand=1 --param ggc-min-heapsize=32768" CPPFLAGS="-I/usr/local/BerkeleyDB.4.8/include -O2" LDFLAGS="-L/usr/local/BerkeleyDB.4.8/lib" --disable-tests --with-miniupnpc --enable-upnp-default && make -j4 && sudo make install

13.6 - Exit folder

cd

14 - Change permitions of the folders:

sudo chmod -R a+rwx /usr/local/bin/ && sudo mkdir /home/pi/.bitcanna && sudo chmod -R a+rwx /home/pi/.bitcanna/

15 - Create bitcanna.conf

sudo nano /home/pi/.bitcanna/bitcanna.conf

15.1 - Copy and past the code lines below

rpcuser=bitcannarpc

rpcpassword=

listen=1

server=1

daemon=1

txindex=1

maxconnections=1000

staking=0

enablezeromint=0

15.2 - press

"ctrl+x" > "Y" > "Enter"

15.3 - Run Wallet to get rpcpassword= info

export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/BerkeleyDB.4.8/lib" && bitcannad

15.4 - Will crash with a warning message

15.5 - Locate where says rpcpassword=SOME_WEIRD_PASSWORD

15.6 - Select and copy it with mouse

15.7 - Edit Create bitcanna.conf

sudo nano /home/pi/.bitcanna/bitcanna.conf

15.8 - Add the copied password to rpcpassword=

15.9 - press

"ctrl+x" > "Y" > "Enter"

16 - Download and "install" bootstrap to speed up initial syncronization of the wallet

cd .bitcanna/ && wget https://github.com/BitCannaCommunity/Bootstrap/releases/download/v3/Bootstrap.09-06-2020.zip && unzip Bootstrap.09-06-2020.zip && rm Bootstrap.09-06-2020.zip && sudo chmod -R a+rwx /home/pi/.bitcanna/

17 - Run and sync Wallet 1st time - I recomend doing the 1st initial sync (wit or without the bootstrap) using the CLI mode for a faster syncing process

17.1 - Run wallet in its headless mode

bitcannad -dbcache=50

17.2 - Check sync process using command

bitcanna-cli getinfo

Not necessary but can be handy
17.3 - Create routine for autoupdate on sync process

while true; do bitcanna-cli getinfo; sleep 3; done

18 - Wait for sync to finish 

19 - Once Sync is finish use wallet as normal by using the syntax

bitcanna-cli WALLET_COMMAND

20 - For Using the QT GUI Wallet

20.1 - Stop the current wallet

bitcanna-cli stop

20.2 - Run Wallet with QT GUI

bitcanna-qt -dbcache=50

Have fun :)

When running the wallet for the 1st time (either after install or after a reboot/shutdown) you need to you the following command before running the wallet, after that you can close and start the wallet as many times as you want using just the bitcann-qt or bitcanna-cli (cli only works after the bitcannd as been lauched)

export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/BerkeleyDB.4.8/lib"
